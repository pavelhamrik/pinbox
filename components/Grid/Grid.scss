@import '../../styles/settings';
@import '../../styles/mixins/breakpoints';
@import '../../styles/mixins/responsive-attr';

$grid-template-columns: '';
@for $col from 1 through $grid-columns {
    $grid-template-columns: $grid-template-columns + ' 1fr';
}

$grid-template-columns: unquote($grid-template-columns);

.grid {
    margin: 0 auto;
    width: 100%;

    // column span

    @each $screen, $size in $breakpoints {
        @include breakpoint(#{$screen}) {
            @for $col from 1 through $grid-columns {
                $colfactor: $grid-columns / $col;
                @if $colfactor == round($colfactor) {
                    &.#{$screen}-#{$col}-cols .GridItem {
                        grid-column-start: auto;
                        grid-column-end: span #{$colfactor};
                    }
                }
            }
        }
    }
}

.content {
    display: grid;
    grid-template-columns: $grid-template-columns;
    justify-content: space-around;
    grid-gap: $grid-gap;

    @include responsive-attr(grid-gap, $grid-gap, 0.25);
}

$alignments: (normal, stretch, center, start, end);
@each $alignment in $alignments {
    .content-align-#{$alignment}{
        align-items: $alignment;
    }
}

.item {
    grid-column: span $grid-columns;
}

@each $screen, $size in $breakpoints {
    @include breakpoint($screen) {
        @for $col from 1 through $grid-columns {
            .#{$screen}-#{$col} {
                grid-column-start: auto;
                grid-column-end: span #{$col};
            }

            .offset-#{$screen}-#{$col} {
                grid-column-start: #{$col + 1} !important;
            }
        }
    }
}
